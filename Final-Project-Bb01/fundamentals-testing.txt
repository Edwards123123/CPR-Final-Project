//
Test Cases Scenarios
Module: fundamental
Gabriela Gomez Lopez
//

//
START TESTING

*** Start of Indexing Strings Demo ***

TEST 1: FAIL - STRING AS INTEGER
Type not empty string (q - to quit):
horse
Type the character position within the string:
e
The character found at 0 position is 'h'

TEST 2: FAIL - NUMBER ALLOWED AND STRING AS INTEGER
Type not empty string (q - to quit):
0
Type the character position within the string:
caracol
The character found at 0 position is '0'

TEST 3: FAIL - DOUBLE MESSAGE WITHOUT CHECKING CONDITION. PASSES MESSAGE OF BIG INPUT
Type not empty string (q - to quit):
crunchy chocolate of my life I wish I could eat you all
Type the character position within the string:
1000
Too big... Position reduced to max. available
The character found at 54 position is 'l'

TEST 4: FAIL - NOT HUMAN-USER EXPERIENCE-COUNT STARTS WITH 0.
Type not empty string (q - to quit):
Ratatouille
Type the character position within the string:
6
The character found at 6 position is 'u'

TEST 5: UNDEFINED - IF COUNTING RIGHT TO LEFT, PASSES.
Type not empty string (q - to quit):
%Gato Michin
Type the character position within the string:
-1
Too big... Position reduced to max. available
The character found at 11 position is 'n'

TEST 6: PASS IF STARTING WITH 0 COUNTING.
Type not empty string (q - to quit):
Gato Gato Pardo
Type the character position within the string:
0
The character found at 0 position is 'G'

TEST 7: FAIL IF WE CAN COUNT FROM RIGHT TO LEFT HAVING NEGATIVE NUMBERS ALLOWED.
Type not empty string (q - to quit):
snake eats mice!!!!
Type the character position within the string:
-3
Too big... Position reduced to max. available
The character found at 18 position is '!'

TEST 8: PASS IF CHARACTER OF NUMBERS ACCEPTED AND POSITION STARTS WITH 0.
Type not empty string (q - to quit):
1234567890
Type the character position within the string:
1
The character found at 1 position is '2'

TEST 9: FAIL - SYMBOL AS INTEGER ACCEPTED
Type not empty string (q - to quit):
p1oi23u45y6
Type the character position within the string:
#
The character found at 0 position is 'p'

TEST 10: FAIL - STRING AS INTEGER
Type not empty string (q - to quit):
!!!!@#$%^%$#@
Type the character position within the string:
w
The character found at 0 position is '!'

TEST 11: UNDEFINED - MULTIPLE SPACES
Type not empty string (q - to quit):
              a
Type the character position within the string:
2
The character found at 2 position is ' '

TEST 12: FAIL - STRING AS INTEGER
Type not empty string (q - to quit):
q-q-qq-q-q-q-q-q-q
Type the character position within the string:
q
The character found at 0 position is 'q'

TEST 13: FAIL - LONG STRING AS INTEGER
Type not empty string (q - to quit):
squirrel bear bear
Type the character position within the string:
12345678998765r4321123456789987654321234567898765432
Too big... Position reduced to max. available
The character found at 17 position is 'r'

TEST 14: FAIL - LONG STRING AS INTEGER
Type not empty string (q - to quit):
Type the character position within the string:
eqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmpoiuyrew
The character found at 0 position is '9'

TEST 15: FAIL- EMPTY STRING
Type not empty string (q - to quit):
Type the character position within the string:
The character found at 0 position is 'o'

TEST 16: FAIL DOUBLE MESSAGE WITHOUT CHECKING CONDITION
Type not empty string (q - to quit):
Type the character position within the string:
12345678asdfghjklqwertyuiopasdfghjkqwertyuioqwertyuiopasdfghjklasdfghjklqwertyuio
Too big... Position reduced to max. available
The character found at 15 position is 'w'

TEST 17: FAIL - STRING AS INTEGER
Type not empty string (q - to quit):
Type the character position within the string:
N@@n@@gaby@@nnnnn@@
The character found at 0 position is 's'

TEST 18: FAIL - SET OF NUMBERS
Type not empty string (q - to quit):
Type the character position within the string:
00101010101
Too big... Position reduced to max. available
The character found at 9 position is '@'

TEST 19: FAIL - DOUBLE POSITION, NOT INPUT GIVEN
Type not empty string (q - to quit):
Type the character position within the string:
1.3
The character found at 1 position is '1'

TEST 20: FAIL. DOUBLE INPUT.
Type not empty string (q - to quit):
01.
Type the character position within the string:
0.23
The character found at 0 position is '0'

TEST 21: FAIL. COMBINED STRINGS AND STRING AS POSITION.
Type not empty string (q - to quit):
1234m
Type the character position within the string:
d
The character found at 0 position is '1'

TEST 22: FAIL - STRING AS INTEGER.
Type not empty string (q - to quit):
dragon
Type the character position within the string:
dragon
The character found at 0 position is 'd'

TEST 23: FAIL - DOUBLE MESSAGE WITHOUTH TESTING CONDITION SHWING CHARACTERS.
Type not empty string (q - to quit):
09877654321 098765432 0987632
Type the character position within the string:
-1000000
Too big... Position reduced to max. available
The character found at 28 position is '2'

TEST 24: FAIL. NOT INTEGER POSITION.
Type not empty string (q - to quit):
Fox on earth eat flowers
Type the character position within the string:
flowers
The character found at 0 position is 'F'

TEST 25: FAIL - NOT STRING.
Type not empty string (q - to quit):
0
Type the character position within the string:
0
The character found at 0 position is '0'

TEST 26: FAIL
Type not empty string (q - to quit):
Q
Type the character position within the string:
q
The character found at 0 position is 'Q'

TEST 27: FAIL
Type not empty string (q - to quit):
Exit
Type the character position within the string:
h
The character found at 0 position is 'E'

TEST 28: PASS
Type not empty string (q - to quit):
q
*** End of Indexing String Demo ***

Program ended with exit code: 0